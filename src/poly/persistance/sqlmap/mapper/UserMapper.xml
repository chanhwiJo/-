<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- JAVA와 연결할 Mapper 파일 설정 -->
<mapper namespace="poly.persistance.mapper.UserMapper">

	<!-- 회원 가입 -->
	<insert id="insertJoin" parameterType="UserDTO">
		INSERT INTO
		USER_INFO (USER_NO, USER_ID, PASSWORD, USER_NAME, EMAIL, DAY, GENDER, PHONE, POST,
		ADDR1, ADDR2, REG_NO, REG_DT)
		VALUES(
		(SELECT IFNULL(MAX(CAST(UI.USER_NO AS UNSIGNED)), 0)+1 FROM USER_INFO UI),
		#{user_id}, #{password}, #{user_name}, #{email}, #{day}, #{gender}, #{phone},
		#{post}, #{addr1}, #{addr2},
		(SELECT IFNULL(MAX(UI.USER_NO), 0)+1 FROM USER_INFO UI), NOW())
	</insert>
	
	<!-- 아이디 중복확인 -->
	<select id="getUserid" parameterType="UserDTO" resultType="int">
		SELECT COUNT(*) FROM USER_INFO WHERE USER_ID = #{user_id}
	</select>
	
	<!-- 이메일 중복확인 -->
	<select id="getEmail" parameterType="UserDTO" resultType="int">
		SELECT COUNT(*) FROM USER_INFO WHERE EMAIL = #{email}
	</select>
	
	<!-- 인증키 생성 -->
	<insert id="insertKey" parameterType="KeyDTO">
		INSERT INTO
		EMAIL_KEY (EMAIL, KEYNUM)
		VALUES(#{email}, #{keynum})
	</insert>
	
	<!-- 이메일 인증 -->
	<select parameterType="keyDTO" resultType="keyDTO" id="getEmailKey">
		SELECT * FROM EMAIL_KEY WHERE EMAIL = #{email} AND KEYNUM = #{keynum}
	</select>
	
	<!-- 아이디 찾기 -->
	<select id="getIdSearch" parameterType="UserDTO" resultType="UserDTO">
		SELECT USER_ID FROM USER_INFO WHERE USER_NAME = #{user_name} AND EMAIL = #{email} AND PHONE = #{phone}
	</select>
	
	<!-- 로그인 -->
	<select id="getUserInfo" parameterType="UserDTO" resultType="UserDTO">
		SELECT * FROM USER_INFO WHERE USER_ID = #{user_id} AND PASSWORD = #{password}
	</select>
	
	<!-- 비밀번호 변경 -->
	<update id="updatePassword" parameterType="UserDTO">
		UPDATE USER_INFO SET PASSWORD = #{password}
		WHERE USER_ID = #{user_id}
	</update>
	
	<!-- 비밀번호 정보 확인 -->
	<select parameterType="UserDTO" id="getPassword" resultType="UserDTO">
		SELECT USER_ID, EMAIL FROM USER_INFO
		WHERE USER_ID = #{user_id} AND EMAIL = #{email}
	</select>
	
	<!-- 본인 인증(이메일, 전화번호) -->
	<select id="checkPassword" parameterType="UserDTO" resultType="UserDTO">
		SELECT IF(COUNT(1)= 1, 'Y', 'N') AS EXISTS_YN
		FROM USER_INFO
		WHERE USER_ID = #{user_id}
		AND EMAIL = #{email}
		AND PHONE = #{phone}
	</select>
	
	<!-- 랜덤 비밀번호 변경 -->
	<update id="autoPassword" parameterType="UserDTO">
		UPDATE USER_INFO
		SET PASSWORD = #{password}
		WHERE USER_ID = #{user_id}
	</update>
	
	<!-- 아이디 여부체크 -->
	<select id="idCheck" parameterType="UserDTO" resultType="int">
		SELECT COUNT(*)
		FROM USER_INFO
		WHERE USER_ID = #{user_id}
	</select>
	
	<!-- 메인페이지 > 회원 -->
	<select id="getUserNum" resultType="UserDTO">
		SELECT COUNT(USER_NO) DATA
		FROM USER_INFO
		WHERE NOT AUTH="AA"
	</select>
	
	<!-- 메인페이지 > 게시물 -->
	<select id="getBoardNum" resultType="BoardDTO">
		SELECT COUNT(BOARD_NO) DATA
		FROM BOARD_INFO
	</select>
	
	<!-- 메인페이지 > 동호회-->
	<select id="getManageNum" resultType="ManageDTO">
		SELECT COUNT(TEAM_NO) NUM
		FROM BOARD_MANAGE
	</select>
	
	<!-- 작성글 리스트 -->
	<select id="getRegList" parameterType="String" resultType="BoardDTO">
		SELECT * FROM BOARD_INFO
		WHERE REG_NO = #{user_no}
		ORDER BY NOTICE_CHECK DESC, CAST(BOARD_NO AS UNSIGNED) DESC LIMIT 10
	</select>
	
	<!-- 총 작성글 개수 -->
	<select id="getRegNum" resultType="BoardDTO">
		SELECT COUNT(BOARD_NO) DATA
		FROM BOARD_INFO
		WHERE REG_NO = #{user_no}
	</select>
	
	<!-- 작성글 검색 -->
	<select id="getRegSearch" parameterType="BoardDTO" resultType="BoardDTO">
		SELECT * FROM BOARD_INFO
		WHERE REG_NO = #{reg_no} AND (TITLE LIKE #{search} OR CONTENT LIKE #{search})
		ORDER BY NOTICE_CHECK DESC, CAST(BOARD_NO AS UNSIGNED) DESC LIMIT 10
	</select>
	
	<!-- 작성글검색 결과수 -->
	<select id="getRegSearchNum" resultType="BoardDTO">
		SELECT COUNT(BOARD_NO) DATA FROM BOARD_INFO
		WHERE REG_NO = #{reg_no} AND (TITLE LIKE #{search} OR CONTENT LIKE #{search})
	</select>
	
	<!-- 작성글 검색 페이징 -->
	<select id="getRegSearchPage" resultType="BoardDTO">
		SELECT * FROM BOARD_INFO
		WHERE REG_NO = #{reg_no} AND (TITLE LIKE #{search} OR CONTENT LIKE #{search})
		ORDER BY NOTICE_CHECK DESC, CAST(BOARD_NO AS UNSIGNED) DESC LIMIT 10 OFFSET #{num}
	</select>
	
	<!-- 회원 상세 -->
	<select id="getUserDetail" parameterType="UserDTO" resultType="UserDTO">
		SELECT * FROM USER_INFO
		WHERE USER_NO = #{user_no}
	</select>
	
	<!-- 회원 삭제 -->
	<delete id="deleteUser" parameterType="UserDTO">
		DELETE FROM USER_INFO
		WHERE USER_NO = #{user_no}
	</delete>
	
	<!-- 회원 수정 -->
	<update id="updateUser" parameterType="UserDTO">
		UPDATE USER_INFO
		SET DAY = #{day}, GENDER = #{gender}, POST = #{post},
			ADDR1 = #{addr1}, ADDR2 = #{addr2}, CHG_NO = #{user_no}, CHG_DT = NOW(), PHONE = #{phone}, PASSWORD = #{password}
		WHERE USER_NO = #{user_no}
	</update>
	
	<!-- 팀명 불러오기 -->
	<select id="getTeamName" parameterType="ManageDTO" resultType="ManageDTO">
		SELECT TEAM_NAME FROM BOARD_MANAGE
		WHERE TEAM_NO = #{team_no}
	</select>
	
	<!-- 글귀랜덤 출력 -->
	<select id="txtPrint" resultType="TxtDTO">
		SELECT * FROM RANDOM_TXT ORDER BY RAND() LIMIT 1
	</select>
	
	<!-- 성별 분석 -->
	<select id="getGenderData" resultType="UserDTO">
		SELECT GENDER, COUNT(GENDER) AS DATA FROM USER_INFO
		GROUP BY GENDER
	</select>
	
	<!-- 동호회가입 여부 분석 -->
	<select id="getTeamData" resultType="UserDTO">
		SELECT COUNT(IF(AUTH='UU'||AUTH='UA', 1, null)) AS DATA, COUNT(IF(AUTH='UU'||AUTH='UA', null, 1)) AS DATA1
		FROM USER_INFO
	</select>
	
	<!-- 나이 분석 -->
	<select id="getAgeData" resultType="UserDTO">
		SELECT TRUNCATE((TO_DAYS(NOW())-(TO_DAYS(DAY)))/365, -1) AS DATA, COUNT(DAY) AS DATA1
		FROM USER_INFO
		GROUP BY DATA
	</select>
	
	<!-- 지역 분석 -->
	<select id="getAddrData" resultType="UserDTO">
		SELECT SUBSTRING_INDEX(ADDR1, ' ', 1) AS DATA, COUNT(ADDR1) DATA1
		FROM USER_INFO
		GROUP BY DATA
	</select>
	
	<!-- 월별 회원 가입 비율 분석 -->
	<select id="getRegData" resultType="UserDTO">
		SELECT MONTH(REG_DT) DATA, COUNT(REG_DT) DATA1
		FROM USER_INFO
		GROUP BY DATA
	</select>
	
	<!-- 회원 리스트 -->
	<select id="getUserList" resultType="UserDTO">
		SELECT USER_NO, USER_ID, USER_NAME, AUTH,
		(SELECT TEAM_NAME FROM BOARD_MANAGE BM WHERE UI.TEAM_NO = BM.TEAM_NO) AS TEAM_NO
		FROM USER_INFO UI
		WHERE NOT AUTH = "AA"
		ORDER BY CAST(USER_NO AS UNSIGNED) ASC LIMIT 10
	</select>
	
	<!-- 회원리스트 페이징 -->
	<select id="getUserPaging" resultType="UserDTO">
		SELECT USER_NO, USER_ID, USER_NAME, AUTH,
		(SELECT TEAM_NAME FROM BOARD_MANAGE BM WHERE UI.TEAM_NO = BM.TEAM_NO) AS TEAM_NO
		FROM USER_INFO UI
		WHERE NOT AUTH = "AA"
		ORDER BY CAST(USER_NO AS UNSIGNED) ASC LIMIT 10 OFFSET #{num}
	</select>
	
	<!-- 회원 검색 -->
	<select id="getUserSearch" resultType="UserDTO">
		SELECT USER_NO, USER_ID, USER_NAME, AUTH,
		(SELECT TEAM_NAME FROM BOARD_MANAGE BM WHERE UI.TEAM_NO = BM.TEAM_NO) AS TEAM_NO
		FROM USER_INFO UI
		WHERE NOT AUTH = "AA" AND (USER_NAME LIKE #{search} OR USER_ID LIKE #{search})
		ORDER BY CAST(USER_NO AS UNSIGNED) ASC LIMIT 10
	</select>
	
	<!-- 회원검색 결과수 -->
	<select id="getUserSearchNum" resultType="UserDTO">
		SELECT COUNT(USER_NO) DATA FROM USER_INFO
		WHERE NOT AUTH = "AA" AND (USER_NAME LIKE #{search} OR USER_ID LIKE #{search})
	</select>
	
	<!-- 회원검색 페이징 -->
	<select id="getUserSearchPage" resultType="UserDTO">
		SELECT USER_NO, USER_ID, USER_NAME, AUTH,
		(SELECT TEAM_NAME FROM BOARD_MANAGE BM WHERE UI.TEAM_NO = BM.TEAM_NO) AS TEAM_NO
		FROM USER_INFO UI
		WHERE NOT AUTH = "AA" AND (USER_NAME LIKE #{search} OR USER_ID LIKE #{search})
		ORDER BY CAST(USER_NO AS UNSIGNED) ASC LIMIT 10 OFFSET #{num}
	</select>
	
</mapper>